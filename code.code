#include <QFile>
#include <QVector>
#include <QDebug>
#include <QtCbor/QCborStreamWriter>
#include <QtCbor/QCborStreamReader>

class Block {
public:
    Block(int value = 0) : value(value) {}

    // Методы для сериализации и десериализации
    void writeToCbor(QCborStreamWriter &writer) const {
        writer.startArray(2); // начинаем массив с длиной 2
        writer << 1; // версия
        writer << value; // данные блока
        writer.endArray();
    }

    void readFromCbor(QCborStreamReader &reader) {
        if (reader.isArray() && reader.arraySize() == 2) {
            reader.enterArray();
            int version;
            reader >> version; // считываем версию
            reader >> value; // считываем данные блока
            reader.leaveArray();
        }
    }

    int value; // пример поля

};

class MyClass {
public:
    void saveToFile(const QString &filename) {
        QFile file(filename);
        if (!file.open(QIODevice::WriteOnly)) {
            qWarning() << "Cannot open file for writing:" << file.errorString();
            return;
        }

        QCborStreamWriter writer(&file);
        writer.startArray(); // Начинаем массив
        writer << 1; // версия файла
        writer.startArray(); // начинаем массив блоков
        for (const Block *block : block_vector) {
            block->writeToCbor(writer); // сериализуем каждый блок
        }
        writer.endArray(); // заканчиваем массив блоков
        writer.endArray(); // заканчиваем общий массив

        file.close();
    }

    void loadFromFile(const QString &filename) {
        QFile file(filename);
        if (!file.open(QIODevice::ReadOnly)) {
            qWarning() << "Cannot open file for reading:" << file.errorString();
            return;
        }

        QCborStreamReader reader(&file);
        if (reader.isArray() && reader.arraySize() == 2) {
            reader.enterArray();
            int version;
            reader >> version; // считываем версию
            if (version != 1) {
                qWarning() << "Unsupported version:" << version;
                return;
            }
            reader.enterArray(); // входим в массив блоков
            while (!reader.isEnd()) {
                Block* block = new Block();
                block->readFromCbor(reader); // десериализуем блок
                block_vector.append(block);
            }
            reader.leaveArray(); // покидаем массив блоков
            reader.leaveArray(); // покидаем общий массив
        }

        file.close();
    }

    QVector<Block *> block_vector; // Вектор блоков
};

// Пример использования
#include <QPushButton>

void onSaveButtonClicked() {
    MyClass myClass;
    myClass.saveToFile("blocks.cbor");
}

void onLoadButtonClicked() {
    MyClass myClass;
    myClass.loadFromFile("blocks.cbor");
}