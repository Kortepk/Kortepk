#include <QCoreApplication>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QJsonValue>
#include <QDebug>

void printJsonValue(const QJsonValue &value, int indent = 0) {
    QString spacing(indent, ' '); // Для отступов при отображении
    if (value.isObject()) {
        QJsonObject obj = value.toObject();
        for (const QString &key : obj.keys()) {
            qDebug() << spacing << key << ":";
            printJsonValue(obj.value(key), indent + 2);
        }
    } else if (value.isArray()) {
        QJsonArray array = value.toArray();
        for (int i = 0; i < array.size(); ++i) {
            qDebug() << spacing << "[" << i << "]:";
            printJsonValue(array.at(i), indent + 2);
        }
    } else {
        qDebug() << spacing << value; // Вывод примитивного значения
    }
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    // Пример JSON-данных
    QString jsonString = R"({
        "name": "John Doe",
        "age": 30,
        "address": {
            "street": "123 Main St",
            "city": "Anytown"
        },
        "phoneNumbers": [
            {"type": "home", "number": "123-456-7890"},
            {"type": "work", "number": "098-765-4321"}
        ]
    })";

    // Парсинг JSON
    QJsonDocument doc = QJsonDocument::fromJson(jsonString.toUtf8());
    QJsonObject jsonObject = doc.object();

    // Вывод в консоль
    printJsonValue(jsonObject);

    return a.exec();
}

#include <QCoreApplication>
#include <QFile>
#include <QDebug>
#include <QByteArray>
#include <QDataStream>
#include <QCBORStreamReader>
#include <QCBORValue>

void printCborValue(const QCborValue &value, int indent = 0) {
    QString spacing(indent, ' '); // Для отступов при отображении

    if (value.isMap()) {
        // Обрабатываем карту
        for (const auto &key : value.mapKeys()) {
            qDebug() << spacing << key.toString() << ":";
            printCborValue(value.toMap().value(key), indent + 2);
        }
    } else if (value.isArray()) {
        // Обрабатываем массив
        for (int i = 0; i < value.size(); ++i) {
            qDebug() << spacing << "[" << i << "]:";
            printCborValue(value.toArray().at(i), indent + 2);
        }
    } else if (value.isInteger()) {
        // Обрабатываем целое число
        qDebug() << spacing << "int:" << value.toInteger();
    } else if (value.isDouble()) {
        // Обрабатываем число с плавающей запятой
        qDebug() << spacing << "double:" << value.toDouble();
    } else {
        // Обрабатываем другие типы
        qDebug() << spacing << "value:" << value.toString(); // Строковые и булевые значения
    }
}

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    QString filePath = "path/to/your/file.cbor"; // Замените на путь к вашему CBOR файлу
    QFile file(filePath);

    if (!file.open(QIODevice::ReadOnly)) {
        qCritical() << "Cannot open file:" << filePath;
        return -1;
    }

    QByteArray data = file.readAll();
    QCborStreamReader reader(data);

    // Чтение данных из CBOR
    while (!reader.atEnd()) {
        if (reader.isFault()) {
            qCritical() << "Error parsing CBOR:" << reader.errorString();
            return -1;
        }

        QCborValue value = reader.next();
        printCborValue(value); // Рекурсивный вывод значения
    }

    if (reader.isFault()) {
        qCritical() << "Error while reading CBOR:" << reader.errorString();
    }

    return a.exec();
}