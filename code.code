#include <QString>

class block {
public:
    block() : weight(0), name("") {}
    block(int w, const QString& n) : weight(w), name(n) {}

    int weight;
    QString name;
};

#include <QFile>
#include <QCborStreamWriter>
#include <QVector>

void saveToCbor(const QVector<block*>& block_vector, const QString& filename) {
    QFile file(filename);
    if (!file.open(QIODevice::WriteOnly)) {
        qWarning("Could not open file for writing");
        return;
    }

    QCborStreamWriter writer(&file);

    // Записываем версию файла
    writer.append(1); // Версия 1

    // Записываем количество блоков
    writer.append(block_vector.size());

    // Записываем каждый блок
    for (const block* b : block_vector) {
        writer.append(b->weight);
        writer.append(b->name);
    }

    file.close();
}

#include <QFile>
#include <QCborStreamReader>
#include <QVector>

void loadFromCbor(QVector<block*>& block_vector, const QString& filename) {
    QFile file(filename);
    if (!file.open(QIODevice::ReadOnly)) {
        qWarning("Could not open file for reading");
        return;
    }

    QCborStreamReader reader(&file);

    // Читаем версию файла
    if (!reader.isInteger()) {
        qWarning("Invalid CBOR format");
        return;
    }
    int version = reader.toInteger();
    reader.next();

    // Читаем количество блоков
    if (!reader.isInteger()) {
        qWarning("Invalid CBOR format");
        return;
    }
    int count = reader.toInteger();
    reader.next();

    // Читаем каждый блок
    for (int i = 0; i < count; ++i) {
        if (!reader.isInteger()) {
            qWarning("Invalid CBOR format");
            return;
        }
        int weight = reader.toInteger();
        reader.next();

        if (!reader.isString()) {
            qWarning("Invalid CBOR format");
            return;
        }
        QString name = reader.readString();
        reader.next();

        block_vector.append(new block(weight, name));
    }

    file.close();
}

#include <QPushButton>

// В вашем классе окна
QVector<block*> block_vector;

// Кнопка для сохранения
QPushButton* saveButton = new QPushButton("Save", this);
connect(saveButton, &QPushButton::clicked, this, [this]() {
    saveToCbor(block_vector, "data.cbor");
});

// Кнопка для загрузки
QPushButton* loadButton = new QPushButton("Load", this);
connect(loadButton, &QPushButton::clicked, this, [this]() {
    block_vector.clear();
    loadFromCbor(block_vector, "data.cbor");
});
